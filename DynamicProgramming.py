# 다이나믹 프로그래밍
# 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법이다
# 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 한다.
# 변수...얘기하는 거 같음
# 일반적으로 두 가지 방식 (탑다운-하향식과 보텀업-상향식)으로 구성된다

# 동적 계획법이라고 한다
# 일반적인 동적의 의미랑은 다르다
#   자료구조에서 동적 할당은(Dynamic Allocation)은 프로그램이 실행되는 도중에 실행에 필요한
#   메모리를 할당하는 기법
# 반면 '다이나믹 프로그래밍'에서 다이나믹은 별다른 의미 없이 사용된 단어....- 어????

# 다음 조건을 만족할 때 사용 가능
#   1. 최적 부분 구조(Optimal Substructure)
#       큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결 가능
#   2. 중복되는 부분 문제(Overlapping Subproblem)
#       동일한 작은 문제를 반복적으로 해결해야 한다.

# 피보나치 함수를 재귀함수로 구현
# 대표적인 중복 문제
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)


print(fibo(4))

# 메모이제이션 (Memoization)
# 구현 방법 중 하나이다.
# 한 번 계산한 결과를 메모리 공간에 메모하는 기법
#   같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옵니다.
#   값을 기록해 놓는다는 점에서 캐싱(Caching)이라고도 합니다.

# 탑다운 VS 보텀업
# 탑다운(메모이제이션) 방식은 하향식이라고도 하며 보텀업 방식은 상향식이라고 한다.
# 다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식이다.
#   결과 저장용 리스트는 DP 테이블이라고 부릅니다.
# 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미한다.
#   따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아닙니다.
#   한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있습니다.

# 탑다운 다이나믹 프로그래밍 - 피보나치 수열

# 한 번 계산된 결과를 메모이제이션(Memoization) 하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수 구현(탑다운 다이나믹 프로그래밍)
def fibo2(x):
    # 종료 조건
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo2(x - 1) + fibo2(x - 2)
    return d[x]

print(fibo2(99))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100
# 첫 번째 피부나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99
# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]
print(d[n])

# 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요하다.
# 가장 먼저 그리디 -> 구현 -> 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 컴토합니다.
#   다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고혀해 봅시다.
# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이
# 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용 가능
# 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많다.

